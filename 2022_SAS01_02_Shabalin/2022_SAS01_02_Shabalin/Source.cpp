
/* Файл 2022_SAS01_02_Shabalin.sln                 */
/* ОТИ МИФИ                                        */
/* 1ИВТ-11Д                                        */
/* Шабалин Кирилл Андреевич	                       */
/* Основы алгоритмизации и программирования        */
/* Работа со стэком 					           */
/* Основной модуль						           */
/* 07.04.2022							           */

#include <stdio.h> 
#include <locale.h>
#include <conio.h>


#define SIZE 100

/* Функция show_menu                               */
/* Назначение:                                     */
/*   выводит на экран меню для работы с программой */
/* Входные данные:                                 */
/*   отстутствуют								   */
/* Выходные данные:                                */
/*   отсутствуют                                   */
/* Возвращаемое значение:                          */
/*   отстуствует                                   */

void show_menu() {
	printf("1 - Ввод выражения\n");
	printf("2 - Проверка выражения\n");
	printf("3 - Выход\n");
}

/* Функция push                                    */
/* Назначение:                                     */
/*   добавляет введеное пользователем число в стэк */
/* Входные данные:                                 */
/*   stack - указатель на расположение стэка	   */
/*   sp - указатель на кол-во элементов в стэке    */
/*   number - число, которое нужно добавить в стэк */
/* Выходные данные:                                */
/*   отсутствуют                                   */
/* Возвращаемое значение:                          */
/*   0 - если стэк переполнен                      */
/*   1 - если число успешно добавленно             */

int push(char* stack, int* sp, char bracket) {
	if (*sp == SIZE - 1) {
		return 0;
	}
	else {
		*(sp) = *(sp)+1;
		stack[*(sp)] = bracket;
		return 1;
	}
}

/* Функция pop                                     */
/* Назначение:                                     */
/*  удаляет последний добавленный элемент со стэка */
/* Входные данные:                                 */
/*   stack - указатель на расположение стэка	   */
/*   sp - указатель на кол-во элементов в стэке    */
/* Выходные данные:                                */
/*   отсутствуют                                   */
/* Возвращаемое значение:                          */
/*   число, удаленное из стэка                     */

int pop(char* stack, int* sp) {
	*(sp) = *(sp) - 1;
	return stack[*(sp) + 1];
}

/* Функция view                                    */
/* Назначение:                                     */
/*  выводит на экран все числа, лежащие в стэке    */
/* Входные данные:                                 */
/*   stack - указатель на расположение стэка	   */
/*   sp - указатель на кол-во элементов в стэке    */
/* Выходные данные:                                */
/*   отсутствуют                                   */
/* Возвращаемое значение:                          */
/*   отсутствует                                   */

void view(char* stack, int* sp) {

	if (*(sp) == -1) {
		printf("\nСтек пуст!\n");
	}

	for (int i = 0; i < (*(sp) + 1); i++) {
		printf("%c", *(stack + i));
	}
	printf("\n");
}

/* Функция write                                   */
/* Назначение:                                     */
/*  записывает символы с клавиатуры в строку       */
/* Входные данные:                                 */
/*   string - строка, в которую нужно записать 	   */
/*   size_string - размер строки                   */
/* Выходные данные:                                */
/*   отсутствуют                                   */
/* Возвращаемое значение:                          */
/*   отсутствует                                   */

void write(char* string, int size_string) {

	scanf_s("%s", string, 255);

}

/* Функция check                                   */
/* Назначение:                                     */
/*  проверяет, все ли открытые скобки закрываются  */
/* Входные данные:                                 */
/*   string - строка с выражением                  */
/*   size_string - размер строки                   */
/*   stack - указатель на расположение стэка	   */
/*   sp - указатель на кол-во элементов в стэке    */
/* Выходные данные:                                */
/*   отсутствуют                                   */
/* Возвращаемое значение:                          */
/*   0 - если в выражении ошибка                   */
/*   1 - если в выражении нет ошибки               */


int check(char* string, int size_string, char* stack, int* sp) {

	int check = 0;

	for (int i = 0; i < size_string; i++) {

		char bracket = *(string + i);

		if (bracket == '<' || bracket == '(' || bracket == '{' || bracket == '[') {

			push(stack, sp, bracket);

		}

		else if (bracket == '>' || bracket == ')' || bracket == '}' || bracket == ']') {

			check = pop(stack, sp);

			if (((bracket - check) < 1) || (bracket - check) > 3) {
				return 0;
			}

		}

	}

	if (*(sp) != -1) {
		return 0;
	}

	return 1;
}

/* Основная функция					 			  */
/* Входные данные:                                */
/*  отстутсвуют                                   */

int main() {

	setlocale(LC_ALL, ".1251");
	char ch;
	int sp = -1;

	char stack[SIZE];

	char string[255] = { 0 };
	int size_string = 255;

	do {

		show_menu();

		scanf_s(" %c", &ch, 1);

		switch (ch) {

		case '0':
			break;

		case '1':

			printf("\nВведите выражение: \n");

			write(string, size_string);

			break;

		case '2':

			if (check(string, size_string, stack, &sp) == 1) {

				printf("\nOk!\n");

			}

			else {

				printf("\nError!\n");

			}

			sp = -1;

			break;

		case '3':
			break;

		default:
			printf("Неверная операция");
			break;
		}
	} while (ch != '3');
}
