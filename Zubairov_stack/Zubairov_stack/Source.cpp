
/* Файл 2022_SAS01_01_Shabalin.sln                 */
/* ОТИ МИФИ                                        */
/* 1ИВТ-11Д                                        */
/* Шабалин Кирилл Андреевич	                       */
/* Основы алгоритмизации и программирования        */
/* Создание стэка						           */
/* Основной модуль						           */
/* 07.04.2022							           */

#include <stdio.h> 
#include <locale.h>

#define SIZE 8

/* Функция show_menu                               */
/* Назначение:                                     */
/*   выводит на экран меню для работы с программой */
/* Входные данные:                                 */
/*   отстутствуют								   */
/* Выходные данные:                                */
/*   отсутствуют                                   */
/* Возвращаемое значение:                          */
/*   отстуствует                                   */

void show_menu() {
	printf("1 - Протолкнуть в стек\n");
	printf("2 - Вытолкнуть со стека\n");
	printf("3 - Просмотреть содержимое стека\n");
	printf("0 - Выход\n");
}

/* Функция push                                    */
/* Назначение:                                     */
/*   добавляет введеное пользователем число в стэк */
/* Входные данные:                                 */
/*   stack - указатель на расположение стэка	   */
/*   sp - указатель на кол-во элементов в стэке    */
/*   number - число, которое нужно добавить в стэк */
/* Выходные данные:                                */
/*   отсутствуют                                   */
/* Возвращаемое значение:                          */
/*   0 - если стэк переполнен                      */
/*   1 - если число успешно добавленно             */

int push(int* stack, int* sp, int number) {
	if (*sp == SIZE - 1) {
		return 0;
	}
	else {
		*(sp) = *(sp) + 1;
		stack[*(sp)] = number;
		return 1;
	}
}

/* Функция pop                                     */
/* Назначение:                                     */
/*  удаляет последний добавленный элемент со стэка */
/* Входные данные:                                 */
/*   stack - указатель на расположение стэка	   */
/*   sp - указатель на кол-во элементов в стэке    */
/* Выходные данные:                                */
/*   отсутствуют                                   */
/* Возвращаемое значение:                          */
/*   число, удаленное из стэка                     */

int pop(int* stack, int* sp) {
	*(sp) = *(sp) - 1;
	return stack[*(sp) + 1];
}

/* Функция view                                    */
/* Назначение:                                     */
/*  выводит на экран все числа, лежащие в стэке    */
/* Входные данные:                                 */
/*   stack - указатель на расположение стэка	   */
/*   sp - указатель на кол-во элементов в стэке    */
/* Выходные данные:                                */
/*   отсутствуют                                   */
/* Возвращаемое значение:                          */
/*   отсутствует                                   */

void view(int* stack, int* sp) {

	if (*(sp) == -1) {
		printf("\nСтек пуст!\n");
	}

	for (int i = 0; i < (*(sp) + 1); i++) {
		printf("%d ", *(stack + i));
	}
	printf("\n");
}

/* Основная функция					 			  */
/* Входные данные:                                */
/*  отстутсвуют                                   */

int main() {

	setlocale(LC_ALL, ".1251");
	char ch;
	int sp = -1;
	int number;
	int stack[SIZE];

	do {

		show_menu();

		scanf_s(" %c", &ch, 1);

		switch (ch) {

		case '0':
			break;

		case '1':

			printf("Введите целое число для помещения в стек: ");  
			scanf_s("%d", &number);

			if (push(stack, &sp, number) == 1) {
				printf("\nЧисло помещено в стек!\n");
			}
			else {
				printf("\nSTECK OVERFLOW!\n");
			}

			break;

		case '2':

			if (sp != -1) {
				printf("\nЧисло %d удалено из стека\n", pop(stack, &sp));
			}
			else {
				printf("\nSTECK UNDERFLOW!\n");
			}

			break;

		case '3':

			view(stack, &sp);
			break;

		default:
			printf("Неверная операция");
			break;
		}
	} while (ch != '0');
}
